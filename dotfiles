#!/usr/bin/env bash
set -euo pipefail
# Copyright (c) 2014 "Cowboy" Ben Alman
# https://github.com/cowboy/dotfiles
# Licensed under the MIT license.
# http://benalman.com/about/license/


# changes from cowboy/dotfiles:
# * take actions to run as optional arguments
# * init files are run not sourced
# * don't fuck with sudoers file
# * remove osx specific stuff
# * so many documentation for functions and what this script does
# * shellcheck stuff
# * removed unused bash array functions
# * sane date formats (`+%Y_%m_%d-%H_%M_%S` -> `+%Y-%m-%d_%H:%M:%S`, I think it
#   was done for filesystem reasons but I value readability more)

# overview of how this works:
# we define actions, and actions have functions in the format of
# $action_$function and they are dynamically called by the "do_stuff $action"
#
# actions are
# * copy
# ** copy into ~/
# * link
# ** link into ~/
# * config
# ** link into ~/.config
# * init
# ** run scripts
#
# do stuff will look for the following functions:
# * ${action}_header
# ** prints something when doing this
# ** no args
# * ${action}_test
# ** returns 0 to skip and string reason, else does action
# ** args of "$file" "$dest"
# * ${action}_dest
# ** return path to override base copy destination
# ** arg of original destination (~/foo in the case of $action/foo)
# * ${action}_do
# ** actually does the action
# * ${action}_files
# ** override the list of files to work with instead of $repo/$action/*
# ** takes arg of the original file list

if [[ "$0" == "bash" ]]; then
    export DOTFILES=~/.dotfiles
else
    export DOTFILES=$(realpath $(dirname "$0"))
fi

# Logging stuff.
function e_header()   { echo -e "\n\033[1m$*\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $*"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $*"; }
function e_warn()     { echo -e " \033[1;33m✖\033[0m  $*"; }
function e_arrow()    { echo -e " \033[1;34m➜\033[0m  $*"; }

# shellcheck disable=SC2120
h () {
    # if arguments, print them
    [ $# == 0 ] || e_error "$*"

  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [OPTION]... [ACTION]...
  setup dotfiles
  optionally only perform specific actions
Available options:
  -h, --help       display this help and exit
EOF

    # if args, exit 1 else exit 0
    [ $# == 0 ] || exit 1
    exit 0
}


msg() {
    echo >&2 -e "${1-}"
}
die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    e_error "$msg"
    exit "$code"
}

checkInstalled() {
    tool=$1
    messsage="${2:-I require $tool but it is not installed}"
    command -v "$tool" >/dev/null 2>&1 || die "$messsage"
}

# Test if this script was run via the "dotfiles" bin script (vs. via curl/wget)
function is_dotfiles_bin() {
    [[ "$(basename "$0" 2>/dev/null)" == dotfiles ]] || return 1
}


# OS detection
# need an is_$os function for each one
function is_osx() {
    [[ "$OSTYPE" =~ ^darwin ]]
}
function is_debian() {
    [[ "$OSTYPE" =~ ^linux ]] && [ -f /etc/debian_version ]
}

# return name of os
# arg: pass "1" to invert matches to return os list that this *isn't*
function get_os() {
    set +e
    for os in osx debian; do
        "is_$os"; [[ $? == "${1:-0}" ]] && echo "$os"
    done
    set -e
}



# Display a fancy multi-select menu.
# Inspired by http://serverfault.com/a/298312
# $1: query
# $2 timeout
# required to set
# * menu_options array of options
# * menu_selects array of options that are selected
function prompt_menu() {
    local exitcode prompt choices i n timeout prompt
    query=$1
    timeout=$2
    exitcode=0
    if [[ "$timeout" ]]; then
        _prompt_menu_draws "$query"
        read -r -t "$timeout" -n 1 -sp "Press ENTER or wait $timeout seconds to continue, or press any other key to edit."
        exitcode=$?
        echo ""
    fi 1>&2
    if [[ "$exitcode" == 0 && "$REPLY" ]]; then
        prompt="Toggle options (Separate options with spaces, ENTER when done): "
        while _prompt_menu_draws "$query" 1 && read -rp "$prompt" -a choices && [[ "${#choices[@]}" != 0 ]]; do
            _prompt_menu_adds "${choices[@]}"
        done
    fi 1>&2
    _prompt_menu_adds
}

# call a function for each choice
# $1: function, will be called with
# * chosen 0/1
# * choice number
# * rest of the arguments to _prompt_menu_iter
function _prompt_menu_iter() {
    local i sel state
    local fn=$1; shift
    for i in "${!menu_options[@]}"; do
        state=0
        for sel in "${menu_selects[@]}"; do
            [[ "$sel" == "${menu_options[i]}" ]] && state=1 && break
        done
        $fn $state "$i" "$@"
    done
}

# $1: prompt
# $2: if in interactive?
function _prompt_menu_draws() {
    e_header "$1"
    _prompt_menu_iter _prompt_menu_draw "$2"
}

function _prompt_menu_draw() {
    local modes=(error success)
    if [[ "$3" ]]; then
        "e_${modes[$1]}" "$(printf "%2d) %s\n" $(($2+1)) "${menu_options[$2]}")"
    else
        "e_${modes[$1]}" "${menu_options[$2]}"
    fi
}


# toggle choices
# pass in toggle choice
function _prompt_menu_adds() {
    _prompt_menu_result=()
    _prompt_menu_iter _prompt_menu_add "$@"
    menu_selects=("${_prompt_menu_result[@]}")
}

# decide if choice is still selected after toggle choices made
# * chosen 0/1
# * choice number
# * choices made
function _prompt_menu_add() {
    local state i n keep match
    state=$1; shift
    i=$1; shift
    for n in "$@"; do
        if [[ $n =~ ^[0-9]+$ ]] && (( n-1 == i )); then
            match=1; [[ "$state" == 0 ]] && keep=1
        fi
    done
    [[ ! "$match" && "$state" == 1 || "$keep" ]] || return
    _prompt_menu_result=("${_prompt_menu_result[@]}" "${menu_options[i]}")
}

# is needle in haystack
# needle
# haystack...
function inArray() {
    # https://stackoverflow.com/a/28032613
    # bug: can match multiple, for example inArray "foo bar" "foo" "bar"
    needle=$1; shift
    echo "${@}" | grep -qow "$needle"
}


###########################################
#           ACTION FUNCTIONS
###########################################

init_file=$DOTFILES/caches/init/selected
function init_files() {
    local i f dirname oses os opt remove
    dirname="$(dirname "$1")"
    f=("$@")

    # menu_options is list of options
    # menu_selects is list of options that are selected
    menu_options=()
    menu_selects=()
    for i in "${!f[@]}"; do menu_options[i]="$(basename "${f[i]}")"; done

    if [[ -e "$init_file" ]]; then
        # Read cache file if possible
        IFS=$'\n' read -d '' -r -a menu_selects < "$init_file"
    else
        # Otherwise default to all scripts not specifically for other OSes
        # also only default scripts named *_opt
        mapfile -t oses < <(get_os 1)

        for opt in "${menu_options[@]}"; do
            remove=
            # set remove if bad os
            for os in "${oses[@]}"; do
                [[ "$opt" =~ (^|[^a-z])$os($|[^a-z]) ]] && remove=1 && break
            done

            # set remove if ends in _opt
            if [[ "$opt" =~ (_opt$) ]]; then
                remove=1
            fi

            # if remove, don't add to menu_selects
            [[ "$remove" ]] || menu_selects=("${menu_selects[@]}" "$opt")
        done

    fi

    set +u
    prompt_menu "Run the following init scripts?" $prompt_delay
    set -u
    # Write out cache file for future reading.
    rm "$init_file" 2>/dev/null
    for i in "${!menu_selects[@]}"; do
        echo "${menu_selects[i]}" >> "$init_file"
        echo "$dirname/${menu_selects[i]}"
    done
}

function init_do() {
    e_header "Running $(basename "$2")"
    #shellcheck disable=SC1090
    "$2"
}


# Copy files.
function copy_header() { e_header "Copying files into home directory"; }
function copy_test() {
    if [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
        echo "same file"
    elif [[ "$1" -ot "$2" ]]; then
        echo "destination file newer"
    else
        return 1;
    fi
}
function copy_do() {
    e_success "Copying ~/$1."
    cp -r "$2" ~/
}

# Link files.
function link_header() { e_header "Linking files into home directory"; }
function link_test() {
    [[ "$1" -ef "$2" ]] && echo "same file"
}
function link_do() {
    e_success "Linking ~/$1."
    ln -sf "${2#"$HOME"/}" ~/
}

# Link config files.
function config_header() {
    e_header "Linking files into ~/.config directory"
    mkdir -p ~/.config
}
function config_dest() {
    echo "$HOME/.config/$base"
}
function config_test() {
    [[ "$1" -ef "$2" ]] && echo "same file"
}
function config_do() {
    e_success "Linking ~/.config/$1."
    ln -sf ../"${2#"$HOME"/}" ~/.config/
}

# Copy, link, init, etc.
function do_stuff() {
    action=$1
    local base dest skip
    local files=("$DOTFILES"/"${action}"/*)

    # TODO: what does this line do and why does shellcheck not like it
    #shellcheck disable=SC2207
    [[ $(declare -f "${action}_files") ]] && files=($("${action}_files" "${files[@]}"))

    # No files? abort.
    if (( ${#files[@]} == 0 )); then return; fi

    # Run _header function only if declared.
    [[ $(declare -f "${action}_header") ]] && "${action}_header"

    # Iterate over files.
    for file in "${files[@]}"; do
        base="$(basename "$file")"
        # Get dest path.
        if [[ $(declare -f "${action}_dest") ]]; then
            dest="$("${action}_dest" "$base")"
        else
            dest="$HOME/$base"
        fi
        # Run _test function only if declared.
        if [[ $(declare -f "${action}_test") ]]; then
            # If _test function returns a string, skip file and print that message.
            ret=0;
            skip=$("${action}_test" "$file" "$dest") || ret=$?
            echo "skip: $skip; ret: $ret"
            if [[ "$ret" -eq 0 ]]; then
                e_warn "Skipping ~/$base, $skip."
                continue
            fi
            # Destination file already exists in ~/. Back it up!
            if [[ -e "$dest" ]]; then
                e_arrow "Backing up ~/$base."
                # Set backup flag, so a nice message can be shown at the end.
                backup=1
                # Create backup dir if it doesn't already exist.
                [[ -e "$backup_dir" ]] || mkdir -p "$backup_dir"
                # Backup file / link / whatever.
                mv "$dest" "$backup_dir"
            fi
        fi
        # Do stuff.
        "${action}_do" "$base" "$file"
    done
}

###########################################
#           DO STUFF
###########################################
# getopt short options go together, long options have commas
TEMP=$(getopt -o h --long help -n "$0" -- "$@")
#shellcheck disable=SC2181
if [ $? != 0 ] ; then
    die "something wrong with getopt"
fi
eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h|--help) h ;;
        --) shift ; break ;;
        *) die "issue parsing args, unexpected argument '$0'!" ;;
    esac
done

default_actions=(copy link config init)
actions=()
if [ "$#" -eq 0 ]; then
    actions=("${default_actions[@]}")
else
    # if user passed actions, we want to select the chosen actions in order

    # validate actions chosen
    for a in "$@"; do
        if ! inArray "$a" "${default_actions[@]}"; then
            h "'$a' is not a valid action"
        fi
    done

    # add chosen actions
    for a in "${default_actions[@]}"; do
        if inArray "$a" "$@"; then
            actions+=("$a")
        fi
    done
fi

# Set the prompt delay to be longer for the very first run.
export prompt_delay=5; is_dotfiles_bin || prompt_delay=15


checkInstalled git

# Initialize.
if [[ ! -d $DOTFILES ]]; then
    # Dotfiles directory doesn't exist? Clone it!
    e_header "Downloading dotfiles"
    git clone --branch "${DOTFILES_GH_BRANCH:-master}" --recursive "https://github.com/${DOTFILES_GH_USER:-mtfurlan}/dotfiles.git" "$DOTFILES"
    cd $DOTFILES || die "couldn't cd dotfiles"
elif [[ $# -eq 0 ]] || [[ "$1" != "restart" ]]; then
    # Make sure we have the latest files.
    e_header "Updating dotfiles"
    cd $DOTFILES || die "couldn't cd dotfiles"
    prev_head="$(git rev-parse HEAD)"
    git pull
    git submodule update --init --recursive --quiet
    if [[ "$(git rev-parse HEAD)" != "$prev_head" ]]; then
        if is_dotfiles_bin; then
            e_header "Changes to dotfiles detected, restarting script"
            exec "$0" restart
        else
            e_header "Changes to dotfiles detected, please re-run script"
            exit
        fi
    fi
fi
if [[ ! -e ~/.dotfiles ]]; then
    # no .dotfiles but it's init, so link
    ln -s "$DOTFILES" ~/.dotfiles
fi

# Add binaries into the path
[[ -d $DOTFILES/bin ]] && export PATH=$DOTFILES/bin:$PATH

# Tweak file globbing.
shopt -s dotglob
shopt -s nullglob

# Create caches dir and init subdir, if they don't already exist.
mkdir -p "$DOTFILES/caches/init"

# If backups are needed, this is where they'll go.
backup_dir="$DOTFILES/backups/$(date "+%Y-%m-%d_%H:%M:%S")/"
backup=

# Execute code for each file in these subdirectories.
msg "running ${actions[*]}"
for a in "${actions[@]}"; do
    do_stuff "$a"
done


# Alert if backups were made.
if [[ "$backup" ]]; then
    echo -e "\nBackups were moved to ~/${backup_dir#"$HOME"/}"
fi

# All done!
e_header "All done!"
